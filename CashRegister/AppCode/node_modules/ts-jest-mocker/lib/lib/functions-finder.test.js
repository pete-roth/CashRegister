"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestClass = void 0;
const functions_finder_1 = require("./functions-finder");
class TestClass {
    constructor() {
        this.lambda1 = () => 'lambda 1 value';
        this.testValue = 'test value';
    }
    method1() {
        return true;
    }
    method2() {
        return false;
    }
    method3() {
        return 'test';
    }
}
exports.TestClass = TestClass;
describe('functions finder', () => {
    it('should find all functions', () => __awaiter(void 0, void 0, void 0, function* () {
        // GIVEN
        const clazz = TestClass;
        // WHEN
        const functions = functions_finder_1.FunctionsFinder.find(clazz);
        // THEN
        expect(functions).toBeDefined();
        expect(functions.size).toBe(3); // TODO should be 4
        expect(functions.has('method1')).toBeTruthy();
        expect(functions.has('method2')).toBeTruthy();
        expect(functions.has('method3')).toBeTruthy();
        //expect(functions.has('lambda1')).toBeTruthy(); // TODO
        expect(functions.has('constructor')).toBeFalsy();
    }));
});
