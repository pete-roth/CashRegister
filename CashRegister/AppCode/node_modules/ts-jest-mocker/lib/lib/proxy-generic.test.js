"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const proxy_generic_1 = require("./proxy-generic");
describe('proxy generic', () => {
    it('should proxy all properties', () => __awaiter(void 0, void 0, void 0, function* () {
        // GIVEN
        // WHEN
        const proxy = (0, proxy_generic_1.createGenericProxy)();
        // THEN
        expect(proxy).toBeDefined();
        expect(proxy.method1).toBeDefined();
        expect(proxy.method2).toBeDefined();
        expect(proxy.method3).toBeDefined();
        expect(proxy.method4).toBeDefined(); // unknown method should also be mocked
    }));
    it('should throw error on methods whose implementation is not mocked explicitly', () => __awaiter(void 0, void 0, void 0, function* () {
        const proxy = (0, proxy_generic_1.createGenericProxy)();
        expect(() => {
            proxy.method1();
        }).toThrowError('Method method1 is not mocked');
        expect(() => {
            proxy[Symbol('foo')]();
        }).toThrowError('Method Symbol(foo) is not mocked');
    }));
});
